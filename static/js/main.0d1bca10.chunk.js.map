{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","components/ChangeBoardNameBtn.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","style","background","randomColor","className","text","emoji","getUnicode","onClick","console","log","deleteCardCallback","id","EMOJI_LIST","NewCardForm","useState","card","setCard","onInputChange","event","target","name","value","newCard","generateEmojis","map","my_emoji","i","key","onSubmit","preventDefault","addCardCallback","data-testid","htmlFor","onChange","placeholder","type","Board","BASE_URL","url","boardName","cards","setCards","errorMessage","setErrorMessage","useEffect","axios","get","then","response","apiData","data","cardObjects","cardWrapper","catch","error","message","deleteCard","delete","newCards","filter","cardComponents","cardInfo","nextId","Math","max","post","unshift","ChangeBoardNameBtn","changeBoardNameCallback","App","setBoardName","newBoardName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0d1bca10.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport randomColor from 'randomcolor';\nimport './Card.css';\n\nconst Card = (props) => {\n\n  const removeCardBtn = () => {\n    console.log('you just clicked the delete button!!');\n    props.deleteCardCallback(props.id);\n  }\n\n  return (\n    <div style={{background: `${randomColor()}`}} className=\"card\">\n      <section className=\"card__content\">\n        <p className=\"card__content-text\">{props.text && props.text}</p>\n        <span className=\"card__content-emoji\">{props.emoji && emoji.getUnicode(props.emoji)}</span>\n      </section>\n      \n      <button className=\"card__delete\" onClick={removeCardBtn}>Delete</button>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  deleteCardCallback: PropTypes.func.isRequired,  \n};\n\nexport default Card;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nconst NewCardForm = (props) => {\n\n  const [card, setCard] = useState({\n    text: \"\",\n    emoji: \"\",\n  })\n\n  const onInputChange = (event) => {\n    const {name, value} = event.target; \n    const newCard = {...card};\n\n    newCard[name] = value;\n    setCard(newCard);\n  };\n\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n\n    props.addCardCallback(card);\n\n    setCard({\n      text: \"\",\n      emoji: \"\",\n    });\n  };\n\n  const generateEmojis = EMOJI_LIST.map((my_emoji, i) => {\n    return (\n      <option key={i} value={my_emoji}>\n        { emoji.getUnicode(my_emoji) }\n      </option>\n    );\n  })\n\n\n  return (\n    <>\n      <h2 className=\"new-card-form__header\">Add a new card!!</h2>\n      <div className=\"new-card-form\">\n        \n        <form \n          className=\"new-card-form__form\" \n          onSubmit={onFormSubmit}\n          data-testid=\"new-card-form--form\"\n        >\n\n          <div>\n            <label className=\"new-card-form__form-label\" htmlFor=\"text\"\n            ></label>\n            <textarea \n              className=\"new-card-form__form-textarea\"\n              id=\"text\"\n              name=\"text\"\n              onChange={onInputChange}\n              value={card.text}\n              placeholder=\"Type something...\"\n              data-testid=\"new-card-form--text\"\n            />\n\n          </div>\n          <div>\n            <label className=\"new-card-form__form-label\" htmlFor=\"emoji\"></label>\n            <select \n              className=\"new-card-form__form-select\"\n              id=\"emoji\"\n              name=\"emoji\"\n              onChange={onInputChange}\n              value={card.emoji}\n              data-testid=\"new-card-form--emoji\"\n            >\n              <option value=\"\"> --emoji-- </option>\n              { generateEmojis }\n            </select>\n\n            <input \n              className=\"new-card-form__form-button\" \n              type=\"submit\" \n              value=\"Add Card\"\n            />\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired\n};\n\nexport default NewCardForm;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nconst Board = (props) => {\n  const BASE_URL = `${props.url}${props.boardName}/cards`\n\n  const[cards, setCards] = useState([]);\n  const[errorMessage, setErrorMessage] = useState(null);\n\n\n  useEffect(() => {\n    axios.get(BASE_URL)\n    .then((response) => {\n      const apiData = response.data;\n      console.log(apiData);\n\n      const cardObjects = apiData.map((cardWrapper, i) => {\n        return {\n          id: cardWrapper.card.id,\n          text: cardWrapper.card.text,\n          emoji: cardWrapper.card.emoji\n        }\n      });\n      setCards(cardObjects);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n  }, [props.boardName]);\n\n\n  // Wave 3\n  const deleteCard = (id) => {\n    axios.delete(`https://inspiration-board.herokuapp.com/cards/${id}`)\n    .then((response) => {\n      const newCards = cards.filter(card => card.id !== id);\n      setCards(newCards);\n    })\n    .catch((error) => {\n      setErrorMessage(error.message);\n    })\n  };\n\n\n  // Wave 3\n  const addCard = (cardInfo) => {\n    const nextId = Math.max(...cards.map(card => card.id)) + 1;\n\n    axios.post(BASE_URL, cardInfo)\n    .then((response) => {\n      const newCards = [...cards];\n      const newCard = {\n        id: nextId,\n        ...cardInfo\n      };\n      newCards.unshift(newCard);\n      setCards(newCards);\n    })\n    .catch((error) => {\n      setErrorMessage(error.message);\n    })\n  }\n\n  // TODO\n  const cardComponents = cards.map((card, i) => {\n    return (\n      <section key={card.id}>\n        <Card \n          id={card.id}\n          text={card.text}\n          emoji={card.emoji}\n          deleteCardCallback={deleteCard}\n        />\n      </section>\n    );\n  });\n\n  return (\n    <div className=\"validation-errors-display\">\n\n      {errorMessage &&\n      <div className=\"validation-errors-display__list\">\n        <h2>{errorMessage}</h2>\n      </div>}\n\n      <div className=\"board\">\n        {cardComponents}\n      </div>\n      <NewCardForm \n        addCardCallback={addCard}\n      />\n    </div>\n  )\n};\n\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ChangeBoardNameBtn.css';\n\nconst ChangeBoardNameBtn = (props) => {\n\n  const onBoardNameChange = (event) => {\n    const {value} = event.target;\n    props.changeBoardNameCallback(value);\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <div>\n      <form className=\"board-name\" onSubmit={onFormSubmit}>\n        <div>\n          <label className=\"change-board-name-btn-label\" htmlFor=\"boardName\">Choose Board ▼</label>\n          <select\n            id=\"boardName\"\n            name=\"boardName\"\n            onChange={onBoardNameChange} \n            value={props.boardName}\n            className=\"change-board-name-btn--select \"\n          >\n            <option value=\"\">--Choose Board--</option>\n            <option value=\"kitty\">Kate P's Board</option>\n            <option value=\"hannah-j\">Hannah J's Board</option>\n          </select>\n        </div>\n      </form>\n\n    </div>\n  );\n};\n\nChangeBoardNameBtn.propTypes = {\n  changeBoardNameCallback: PropTypes.func.isRequired,\n};\n\nexport default ChangeBoardNameBtn;","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport ChangeBoardNameBtn from './components/ChangeBoardNameBtn';\n\nconst App = () => {\n  const [boardName, setBoardName] = useState('kitty');\n\n  const changeBoardName = (newBoardName) => {\n    setBoardName(newBoardName);\n  };\n\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={boardName}\n      />\n      <ChangeBoardNameBtn \n        changeBoardNameCallback={changeBoardName}\n        boardName={boardName}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}